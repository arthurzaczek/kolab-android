#summary Overview of the synchronization algorithm
#labels Featured,Phase-Implementation

= Sync =

The actual synchronization algorithm is almost independent of the actual source and destination, and totally independent of the synchronized data items.

== Important Classes ==

  * `CacheEntry`: holds all data to connect remote and local items and recognize changes in them
  * `SyncWorker`: the background worker thread that holds the main synchronization algorithm (`SyncWorker.sync()`)
  * `SyncHandler` interface: defines the necessary operations to be able to synchronize a local data store
  * `AbstractSyncHandler`: common code for all local data stores

== Auxiliary Classes ==

  * `BaseWorker`: basic threading and status management
  * `StatusEntry`: log file data
  * `SyncContext`: "cursor" item for the currently synchronized item
  * `SyncException`: application specific exception
  * `SyncService`, `SyncServiceManager`: keep the synchronization running in the background